Чтобы улучшить внешний вид вашего компонента пагинации и добавить функциональность для скрытия и отображения элементов, можно использовать CSS для стилизации и Angular для управления динамическим содержимым. Вот шаги по улучшению:

1. HTML-шаблон
Изменим HTML-шаблон, чтобы добавить классы для стилизации и динамического отображения номеров страниц:

html
Копировать код
<div class="pagination">
    <span class="material-icons-round" id="first-page" title="Первая страница" (click)="first_page()">first_page</span>
    <span class="material-icons" id="previous-page" title="Предыдущая страница" (click)="before_page()">navigate_before</span>
    
    <div id="page-numbers" class="page-numbers">
        <ng-container *ngFor="let page of pageNumbers">
            <span 
                class="page-number" 
                [class.active]="page === currentPage"
                (click)="goToPage(page)"
                [class.hidden]="page < startPage || page > endPage"
            >
                {{ page }}
            </span>
        </ng-container>
    </div>
    
    <span class="material-icons" id="next-page" title="Следующая страница" (click)="next_page()">navigate_next</span>
    <span class="material-icons-outlined" id="last-page" title="Последняя страница" (click)="last_page()">last_page</span>
</div>
2. CSS для стилизации
Добавим стили, чтобы улучшить внешний вид пагинации и обеспечить визуальные эффекты:

css
Копировать код
/* Основной контейнер пагинации */
.pagination {
    display: flex;
    align-items: center;
    justify-content: center;
    gap: 10px;
}

/* Стили для кнопок навигации */
.material-icons, .material-icons-round, .material-icons-outlined {
    cursor: pointer;
    font-size: 24px;
    transition: color 0.3s ease;
}

.material-icons:hover, .material-icons-round:hover, .material-icons-outlined:hover {
    color: #007bff; /* Измените цвет при наведении, если нужно */
}

/* Стили для номеров страниц */
.page-numbers {
    display: flex;
    gap: 5px;
}

/* Стили для каждого номера страницы */
.page-number {
    cursor: pointer;
    padding: 5px 10px;
    border-radius: 5px;
    background-color: #f1f1f1;
    transition: background-color 0.3s ease, color 0.3s ease;
}

.page-number.active {
    background-color: #007bff;
    color: #fff;
}

.page-number:hover {
    background-color: #ddd; /* Измените цвет при наведении, если нужно */
}

/* Стили для скрытия номеров страниц вне текущего диапазона */
.page-number.hidden {
    display: none;
}
3. Логика в Angular-компоненте
Добавьте логику для управления состоянием пагинации и динамическим отображением страниц:

typescript
Копировать код
export class YourComponent implements OnInit {
  totalPages: number = 0;  // Общее количество страниц
  currentPage: number = 1; // Текущая страница
  pageNumbers: number[] = []; // Список номеров страниц
  startPage: number = 1; // Начальная страница для отображения
  endPage: number = 5;   // Конечная страница для отображения

  ngOnInit() {
    this.calculatePageNumbers();
  }

  calculatePageNumbers() {
    this.pageNumbers = Array.from({ length: this.totalPages }, (_, i) => i + 1);
  }

  goToPage(page: number) {
    if (page >= 1 && page <= this.totalPages) {
      this.currentPage = page;
      this.updatePageNumbers();
      // Ваш код для загрузки данных для текущей страницы
    }
  }

  updatePageNumbers() {
    const totalPages = this.pageNumbers.length;
    this.startPage = Math.max(1, this.currentPage - 2);
    this.endPage = Math.min(totalPages, this.currentPage + 2);
  }

  first_page() {
    this.goToPage(1);
  }

  before_page() {
    if (this.currentPage > 1) {
      this.goToPage(this.currentPage - 1);
    }
  }

  next_page() {
    if (this.currentPage < this.totalPages) {
      this.goToPage(this.currentPage + 1);
    }
  }

  last_page() {
    this.goToPage(this.totalPages);
  }
}
4. Объяснение
HTML-шаблон: Мы добавили Angular директивы для динамического отображения номеров страниц и используем классы для управления активным состоянием и видимостью страниц.

CSS: Стили обеспечивают плавные переходы и визуальные эффекты для кнопок и номеров страниц.

TypeScript: Логика в компоненте управляет текущей страницей и обновляет видимость номеров страниц в зависимости от текущей страницы.

Этот подход обеспечит функциональную и визуально приятную пагинацию для вашего приложения. Вы можете настроить стили и логику в зависимости от ваших конкретных требований.
