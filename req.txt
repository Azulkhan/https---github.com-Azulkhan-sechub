To add pagination to your existing HTML template, you'll need to integrate a pagination component and update your TypeScript class to handle pagination logic. Here's a step-by-step guide to adding pagination:

1. Update TypeScript Class
Extend your class to manage pagination by adding methods for handling page changes and updating the data to be displayed based on the current page. Here's how you can modify your TypeScript class:

typescript
Копировать код
export class GenClass extends vm.constructor {
    // Existing properties
    page = 1;  // Current page
    perpage = 15;  // Number of items per page
    totalItems = 0; // Total number of items

    // Method to handle page change
    changePage(page: number) {
        this.page = page;
        this.bind();
    }

    // Update bind method to handle pagination
    bind() {
        let option = this.query_options['report$mob_inv_os_shortage'];
        option.preparam1 = this.f['param$74'].value ? this.f['param$74'].value : '';
        option.preparam2 = this.f['param$75'].value ? this.f['param$75'].value : '';
        option.preparam3 = this.f['param$81'].value ? this.f['param$81'].value : '';
        option.page = this.page;  // Pass current page
        option.perpage = this.perpage;  // Pass number of items per page

        this.dbQueryService.getQuery(option).subscribe((resp) => {
            if (resp && resp.items) {
                this.query_report$mob_inv_os_shortage = resp.items;
                this.totalItems = resp.totalItems || 0; // Update total items count
                if (!this.fields['report$mob_inv_os_shortage']) {
                    this.getFields('report$mob_inv_os_shortage');
                }
            } else {
                this.query_report$mob_inv_os_shortage = [];
                this.totalItems = 0;
            }
        });
    }
}
2. Update HTML Template
Integrate pagination controls into your HTML template. You can use a basic pagination layout or a pagination component from a library like PrimeNG.

Here's how you can update your HTML template with basic pagination controls:

html
Копировать код
<div class="p-card">
    <!-- Existing content -->

    <div class="card-body">
        <!-- Existing form and table -->

        <div class="table-responsive mt-3">
            <span *ngIf="fields['report$mob_inv_os_shortage'] && fields['report$mob_inv_os_shortage'].length > 0" class="ms-2 text-secondary" translate="Количество записей:"> <span class="text-dark" [innerHtml]="query_report$mob_inv_os_shortage.length-1"></span></span>
            <table class="table table-striped" style="padding: 12px;border: 1px solid #ddd;">
                <thead>
                    <!-- Existing table header -->
                </thead>
                <tbody>
                    <!-- Existing table body -->
                </tbody>
                <tfoot>
                    <!-- Existing table footer -->
                </tfoot>
            </table>

            <!-- Pagination Controls -->
            <div class="pagination">
                <button (click)="changePage(1)" [disabled]="page === 1">First</button>
                <button (click)="changePage(page - 1)" [disabled]="page === 1">Previous</button>
                <span>Page {{page}} of {{ Math.ceil(totalItems / perpage) }}</span>
                <button (click)="changePage(page + 1)" [disabled]="page >= Math.ceil(totalItems / perpage)">Next</button>
                <button (click)="changePage(Math.ceil(totalItems / perpage))" [disabled]="page >= Math.ceil(totalItems / perpage)">Last</button>
            </div>
        </div>
    </div>
</div>
3. Add CSS for Pagination
Include CSS to style the pagination controls. Here's a basic style that you can use:

html
Копировать код
<style>
    .pagination {
        display: flex;
        justify-content: center;
        margin-top: 20px;
    }
    .pagination button {
        margin: 0 5px;
        padding: 5px 10px;
        border: 1px solid #ddd;
        background-color: #f2f2f2;
        cursor: pointer;
    }
    .pagination button:disabled {
        cursor: not-allowed;
        opacity: 0.5;
    }
    .pagination span {
        align-self: center;
        margin: 0 10px;
    }
</style>
Summary
TypeScript Class: Update to manage the current page and handle page changes.
HTML Template: Add pagination controls and update the table to reflect the current page's data.
CSS: Style the pagination controls for better presentation.
Feel free to adjust the pagination controls and styling according to your preferences or requirements.






