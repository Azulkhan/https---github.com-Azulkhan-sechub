Да, вы можете использовать опцию `-out` вместо `-noout` в команде `openssl x509`, чтобы сохранить преобразованный сертификат в файл. 

Вот пример скрипта, который выполняет команду `openssl` и сохраняет информацию о сертификате в выходной файл:

```python
import subprocess

def extract_certificate_info(input_file, output_file, input_format='PEM'):
    try:
        if input_format == 'DER':
            cmd = ["openssl", "x509", "-inform", "DER", "-in", input_file, "-text", "-out", output_file]
        else:  # default to PEM format
            cmd = ["openssl", "x509", "-in", input_file, "-text", "-out", output_file]
        
        subprocess.run(cmd, check=True)
        print(f"Certificate information saved to {output_file}")
    except subprocess.CalledProcessError as e:
        print(f"An error occurred: {e}")

# Example usage
extract_certificate_info('certificate.der', 'certificate_info.txt', 'DER')
```

Этот скрипт:
1. Импортирует модуль `subprocess`.
2. Определяет функцию `extract_certificate_info`, которая принимает три аргумента: путь к входному файлу сертификата (`input_file`), путь к выходному файлу (`output_file`) и формат входного файла (`input_format`, по умолчанию `'PEM'`).
3. Проверяет формат входного файла и формирует соответствующую команду `openssl`.
4. Выполняет команду с помощью `subprocess.run`, что вызывает команду `openssl` и сохраняет вывод в указанный файл.
5. В случае успешного выполнения выводит сообщение об успешном сохранении информации, в противном случае выводит сообщение об ошибке.

Пример использования функции `extract_certificate_info` приведен в конце скрипта. Вы можете изменить пути к файлам и формат входного файла в соответствии с вашими требованиями.