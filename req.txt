Для замены множества проверок `if else` в REST-сервисе можно использовать подходы, основанные на управлении потоком данных и структурировании кода. Вот несколько методов:

1. **Шаблон проектирования Цепочка обязанностей (Chain of Responsibility)**:
   - Разделите каждую проверку на отдельный компонент, который занимается только одной проверкой.
   - Каждый компонент решает, должен ли он обрабатывать запрос или передать его дальше по цепочке.
   - Это позволяет избежать вложенных `if else` и обеспечивает более гибкую и расширяемую структуру.

2. **Таблицы диспетчеризации (Dispatch Tables)**:
   - Используйте структуры данных, которые сопоставляют условия (например, значения параметров запроса) с функциями или обработчиками.
   - Это позволяет избежать больших блоков `if else` и делает код более декларативным.

3. **Паттерн Стратегия (Strategy)**:
   - Выделите различные стратегии в отдельные классы, каждый из которых выполняет определенную проверку или действие.
   - Контекст сервиса выбирает подходящую стратегию на основе входных данных или условий.

4. **Шаблон проектирования Состояние (State)**:
   - Разделите состояния, в которых может находиться ваш сервис, на отдельные классы.
   - Каждый класс состояния реализует свою логику проверок и действий.
   - Переключение между состояниями осуществляется в зависимости от текущего контекста запроса.

5. **Использование аннотаций или аспектно-ориентированного программирования (Aspect-Oriented Programming, AOP)**:
   - В некоторых языках программирования можно использовать аспекты для выноса кросс-вырезки и обработки запросов, таких как проверка аутентификации или авторизации.

Выбор конкретного метода зависит от контекста вашего приложения, требований к производительности и расширяемости кода.