Для создания такого функционала, где при выборе страницы отображается динамический диапазон страниц, вам понадобится сочетание HTML, CSS и JavaScript. Вот пример, как это можно реализовать:

HTML
html
Копировать код
<div class="pagination">
    <span class="material-icons-round" id="first-page" title="Первая страница">first_page</span>
    <span class="material-icons" id="previous-page" title="Предыдущая страница">navigate_before</span>
    
    <div id="page-numbers" class="page-numbers">
        <!-- Page numbers will be dynamically inserted here -->
    </div>

    <span class="material-icons" id="next-page" title="Следующая страница">navigate_next</span>
    <span class="material-icons-outlined" id="last-page" title="Последняя страница">last_page</span>
</div>
CSS
css
Копировать код
.pagination {
    display: flex;
    align-items: center;
}

.material-icons, .material-icons-round, .material-icons-outlined {
    cursor: pointer;
    margin: 0 5px;
}

.page-numbers {
    display: flex;
}

.page-numbers span {
    cursor: pointer;
    margin: 0 3px;
}

.page-numbers span.active {
    font-weight: bold;
}
JavaScript
javascript
Копировать код
const totalPages = 10; // Total number of pages
let currentPage = 1; // Current page number

const pageNumbersContainer = document.getElementById('page-numbers');
const firstPageButton = document.getElementById('first-page');
const previousPageButton = document.getElementById('previous-page');
const nextPageButton = document.getElementById('next-page');
const lastPageButton = document.getElementById('last-page');

function updatePagination() {
    pageNumbersContainer.innerHTML = '';

    // Determine range of pages to show
    let startPage = Math.max(1, currentPage - 2);
    let endPage = Math.min(totalPages, currentPage + 2);

    // Adjust range if it’s near the edges
    if (currentPage <= 3) {
        endPage = Math.min(totalPages, 5);
    }
    if (currentPage >= totalPages - 2) {
        startPage = Math.max(1, totalPages - 4);
    }

    for (let i = startPage; i <= endPage; i++) {
        const span = document.createElement('span');
        span.textContent = i;
        if (i === currentPage) {
            span.classList.add('active');
        }
        span.addEventListener('click', () => {
            currentPage = i;
            updatePagination();
        });
        pageNumbersContainer.appendChild(span);
    }
    
    firstPageButton.style.visibility = currentPage === 1 ? 'hidden' : 'visible';
    previousPageButton.style.visibility = currentPage === 1 ? 'hidden' : 'visible';
    nextPageButton.style.visibility = currentPage === totalPages ? 'hidden' : 'visible';
    lastPageButton.style.visibility = currentPage === totalPages ? 'hidden' : 'visible';
}

firstPageButton.addEventListener('click', () => {
    currentPage = 1;
    updatePagination();
});

previousPageButton.addEventListener('click', () => {
    if (currentPage > 1) {
        currentPage--;
        updatePagination();
    }
});

nextPageButton.addEventListener('click', () => {
    if (currentPage < totalPages) {
        currentPage++;
        updatePagination();
    }
});

lastPageButton.addEventListener('click', () => {
    currentPage = totalPages;
    updatePagination();
});

// Initial call to set up pagination
updatePagination();
Описание
HTML: Создаем контейнер с иконками и область для отображения номеров страниц.
CSS: Определяем стиль для иконок и номеров страниц.
JavaScript: Обрабатываем логику для отображения номеров страниц, управления видимостью кнопок и обновления текущей страницы.
Вы можете адаптировать этот код под свои нужды, изменяя количество страниц или стиль.
