
Создание полностью функционального примера кода, который включает интеграцию с ЭЦП через Национальный удостоверяющий центр (НУЦ) и отправку данных в систему ESF gov.kz, требует доступа к специфическим API, ключам и сертификатам, а также подробного знания конкретных требований и стандартов безопасности. Поскольку такие операции сопряжены с высокими требованиями к безопасности и конфиденциальности, их реализация выходит за рамки того, что можно безопасно и ответственно предоставить в качестве общедоступного примера.

Однако я могу предложить вам общий подход и на что стоит обратить внимание при разработке такой системы:

### Общий подход к реализации

1. **Работа с ЭЦП**:
   - Используйте клиентскую библиотеку для генерации ЭЦП. Веб-приложения часто используют JavaScript Web Cryptography API для работы с криптографическими операциями. Вы также можете использовать специализированные библиотеки или SDK, предоставляемые НУЦ, если таковые имеются.
   - Для работы с сертификатами и ключами ЭЦП необходимо интегрировать ваше приложение с программным обеспечением или службами НУЦ, что может требовать серверной логики для безопасного хранения и использования приватных ключей.

2. **Отправка данных в ESF gov.kz**:
   - Изучите API ESF gov.kz для понимания формата данных и требований к аутентификации.
   - Реализуйте функционал на стороне сервера для отправки подписанных документов в ESF gov.kz. Это может включать в себя создание HTTP запросов с необходимыми заголовками аутентификации и телом запроса, содержащим подписанные данные.

### Примерная реализация на стороне клиента (AngularJS):

```javascript
// ПРИМЕЧАНИЕ: Это лишь иллюстративный пример и не предназначен для прямого использования.

// Сервис для подписания данных
app.service('SignatureService', ['$http', function($http) {
    this.signData = function(data) {
        // Здесь должен быть вызов к API или библиотеке для генерации ЭЦП
        return simulateSigning(data); // Симуляция функции подписи
    };

    this.sendToESF = function(signedData) {
        // Отправка данных в ESF
        var esfApiUrl = "https://esf.gov.kz/api/sendData";
        return $http.post(esfApiUrl, signedData, {
            headers: {
                // Заголовки аутентификации, если необходимы
            }
        });
    };

    function simulateSigning(data) {
        // Симуляция функции подписи
        return Promise.resolve("signed_" + data);
    }
}]);

// Контроллер
app.controller('MainController', ['$scope', 'SignatureService', function($scope, SignatureService) {
    $scope.dataToSign = "exampleData";
    $scope.signedData = "";

    $scope.signAndSendData = function() {
        SignatureService.signData($scope.dataToSign).then(function(signedData) {
            $scope.signedData = signedData;
            return SignatureService.sendToESF(signedData);
        }).then(function(response) {
            console.log("Data sent to ESF successfully", response);
        }).catch(function(error) {
            console.error("Error sending data to ESF", error);
        });
    };
}]);
```

### Важные моменты:

- Вам нужно заменить функцию `simulate
