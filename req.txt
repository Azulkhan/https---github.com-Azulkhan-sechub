Чтобы вызвать функцию `runUserTask` из AngularJS контроллера в месте, где нет `ng-controller`, вы можете создать сервис или использовать корневой элемент `$rootScope`. Вот как это можно сделать:

### 1. Использование `$rootScope`

Если вам нужно быстрое решение, вы можете зарегистрировать вашу функцию в `$rootScope`. Это сделает функцию доступной во всем приложении, но это не является лучшей практикой из-за потенциальных проблем с производительностью и поддерживаемостью.

#### Пример:

```javascript
// В вашем контроллере
app.controller('YourController', function($scope, $rootScope) {
    $scope.runUserTask = function() {
        // Ваш код здесь
    };

    // Регистрация функции в $rootScope
    $rootScope.runUserTask = $scope.runUserTask;
});
```

Теперь вы можете вызывать `runUserTask()` в любом месте вашего приложения:

```html
<button ng-click="runUserTask()">Run User Task</button>
```

### 2. Использование сервиса

Более чистое и рекомендуемое решение — создание сервиса, который будет содержать вашу функцию.

#### Пример:

1. Создайте сервис:

```javascript
app.service('UserTaskService', function() {
    this.runUserTask = function() {
        // Ваш код здесь
    };
});
```

2. В контроллере используйте этот сервис:

```javascript
app.controller('YourController', function($scope, UserTaskService) {
    $scope.runUserTask = UserTaskService.runUserTask;
});
```

3. Используйте сервис напрямую в любом месте, где это необходимо:

```html
<button ng-click="runUserTask()">Run User Task</button>
```

4. Если нужно вызвать функцию вне контроллера, инжектируйте сервис в нужный компонент или директиву и используйте его функцию:

```javascript
app.directive('yourDirective', function(UserTaskService) {
    return {
        link: function(scope, element) {
            element.on('click', function() {
                UserTaskService.runUserTask();
            });
        }
    };
});
```

Теперь функция `runUserTask` доступна во всех компонентах, где инжектирован `UserTaskService`.

### Рекомендации

Использование `$rootScope` для глобального доступа к функциям должно быть ограничено, так как это может привести к неожиданным побочным эффектам и усложнить отладку. Использование сервисов и фабрик является более гибким и масштабируемым подходом для управления состоянием и логикой вашего приложения.