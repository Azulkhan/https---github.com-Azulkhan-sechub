

10. **История языка C: оружие для системного программирования**  
   В 1970-х годах **Деннис Ритчи** в лаборатории Bell Labs создал язык **C**, чтобы упростить разработку операционной системы **UNIX**. До этого программы для операционных систем писались на ассемблере, что делало их сложными и трудными в поддержке. C позволил писать программы на высоком уровне, сохраняя контроль над аппаратурой. Этот язык стал настолько влиятельным, что многие современные языки, такие как C++, Java и даже C#, основаны на его синтаксисе.

11. **Ошибка с кредитными картами**  
   В 2010 году одна крупная американская компания по ошибке списала с кредитных карт клиентов по 23 квадриллиона долларов. Это случилось из-за ошибки в системе платежей, которая случайно добавила лишние нули в суммы транзакций. Ошибка быстро была устранена, и средства вернулись на счета, но это стало одним из крупнейших электронных сбоев в истории финансовых систем.

12. **"Синдром Каскада" в социальных сетях**  
   Когда Facebook начал активно набирать популярность, программисты обнаружили, что небольшие изменения в алгоритмах новостной ленты могут иметь неожиданно большие последствия. Это называется "синдромом каскада", когда одно изменение в коде запускает цепь реакций, затрагивая всё больше элементов системы. Один из таких случаев привел к тому, что новостные ленты у многих пользователей были полностью пустыми, что вызвало массовые жалобы и потребовало оперативного исправления.

13. **"Соревнование между инженером и компьютером" в шахматах**  
   В 1997 году шахматный компьютер **Deep Blue**, разработанный IBM, стал первой машиной, обыгравшей действующего чемпиона мира по шахматам, **Гарри Каспарова**. Deep Blue мог просчитывать миллионы ходов в секунду, и эта победа стала важной вехой в развитии искусственного интеллекта и машинного обучения. Несмотря на победу компьютера, Каспаров утверждал, что в некоторых моментах машина играла как человек, и даже предполагал, что она использовала элементы психологии.

14. **Google: ошибка с количеством "о"**  
   Основатели Google, **Ларри Пейдж** и **Сергей Брин**, не сразу знали, что их поисковая система станет мировой. Первоначально они планировали назвать её "Googol", что означает число 1, за которым следуют 100 нулей, чтобы символизировать огромные объёмы данных. Однако в процессе регистрации доменного имени допустили ошибку, и оно стало "Google". Несмотря на опечатку, название прижилось, и сегодня Google — это не только название компании, но и глагол, означающий поиск в интернете.

15. **"Забытое лицо" в смайликах**  
   В 2008 году при работе с новой версией Java программа в одной компании начала выдавать странные ошибки с символами юникода. Инженеры долго не могли найти проблему, пока не обнаружили, что вместо правильного отображения смайликов, программа интерпретировала их как иероглифы или даже "забытые лица" в кодировке. Проблема оказалась в неправильной интерпретации данных юникода в старых кодировках. Это вызвало массу недоразумений и привело к тому, что разработчики усилили поддержку юникода во многих приложениях.

16. **Проблема "Тёмного времени" в Windows**  
   В ранних версиях операционной системы Windows был интересный баг: если установить системные часы на 31 декабря 1999 года, а затем перейти на 1 января 2000 года, экран становился полностью черным, и пользователи не могли использовать компьютер. Это случилось из-за ошибки в расчётах, связанной с переходом на новый век, когда операционная система не знала, как обработать смену даты на 2000-й год. Этот баг стал одним из тех, что заставили разработчиков серьезнее относиться к проверке даты и времени в своих приложениях.

17. **Apple и тёмная история App Store**  
   В 2008 году, когда Apple запустила **App Store**, это стало революцией в мобильных приложениях. Но за первым успехом стоял скрытый конфликт: многие разработчики жаловались, что их приложения отклоняются без объяснений, что делает процесс публикации непредсказуемым. Это породило множество жалоб, и только через несколько лет Apple упростила и открыла процесс модерации, что позволило разработчикам лучше понимать причины отклонений и быстро исправлять свои ошибки.

18. **История с "GOTO" и структурным программированием**  
   В 1968 году компьютерный учёный **Эдсгер Дейкстра** написал статью "GOTO Statement Considered Harmful", где он утверждал, что использование команды GOTO в программировании делает код трудно читаемым и поддерживаемым. Это вызывало ожесточенные дебаты в сообществе разработчиков, но его идеи в конечном итоге победили. Вскоре появились принципы структурного программирования, и большинство языков программирования начали постепенно отказываться от GOTO, отдавая предпочтение циклам и управляющим структурам, таким как "for" и "while".

19. **История багов и миллионных убытков в игровой индустрии**  
   В 2014 году вышла игра **Assassin’s Creed: Unity**, которая сразу же стала хитом, но также вызвала шквал критики из-за огромного количества багов. Персонажи "проваливались" сквозь текстуры, их лица исчезали, а сцены ломались. Разработчикам пришлось срочно выпускать патчи, исправляющие ошибки. В результате проблем с качеством компания **Ubisoft** понесла миллионные убытки и была вынуждена предложить бесплатные дополнения к игре в качестве компенсации. Этот случай стал наглядным уроком того, как важно тестировать игры перед выпуском.

20. **"Ping of Death" — самая известная хакерская атака**  
   В середине 1990-х годов появилась атака под названием **"Ping of Death"**, которая использовала уязвимость в протоколе ICMP (ping). Отправляя слишком большие пакеты данных, хакеры могли вызвать сбой операционной системы или сетевых устройств, что приводило к их отключению. Многие системы того времени были не готовы к таким атакам, что заставило инженеров по безопасности пересмотреть подходы к защите сетей. Эта атака продемонстрировала, как простой инструмент может стать мощным оружием в руках злоумышленников.

Эти истории показывают, насколько разнообразен и непредсказуем мир программирования — от случайных багов до масштабных технологий, которые изменили мир.