Для создания сложного `SELECT` с подзапросами и сложными `JOIN` в PostgreSQL, есть несколько основных принципов и шагов:

1. **Понимание структуры данных**: Прежде чем писать запрос, необходимо хорошо понимать структуру таблиц и их связи.

2. **Основной запрос**: Начните с написания основного запроса, который будет основой для вашего сложного запроса.

3. **Подзапросы**: Используйте подзапросы (или `subquery`), когда необходимо получить данные из другой таблицы или агрегировать данные перед основным запросом.

4. **JOIN**: Определите, какие типы `JOIN` (INNER JOIN, LEFT JOIN, RIGHT JOIN, FULL JOIN) необходимы для соединения таблиц.

5. **Алиасы**: Используйте алиасы (псевдонимы) для упрощения чтения и записи запросов.

6. **Условие WHERE**: Определите условия фильтрации для основного запроса и подзапросов.

7. **Группировка и сортировка**: Используйте `GROUP BY` и `ORDER BY` для агрегирования и сортировки данных соответственно.

Пример сложного запроса:

```sql
SELECT 
    a.id,
    a.name,
    b.total_sales,
    c.total_orders
FROM 
    customers a
    INNER JOIN (
        SELECT 
            customer_id, 
            SUM(amount) AS total_sales
        FROM 
            sales
        GROUP BY 
            customer_id
    ) b ON a.id = b.customer_id
    LEFT JOIN (
        SELECT 
            customer_id, 
            COUNT(order_id) AS total_orders
        FROM 
            orders
        GROUP BY 
            customer_id
    ) c ON a.id = c.customer_id
WHERE 
    a.active = true
ORDER BY 
    b.total_sales DESC;
```

### Объяснение запроса:

1. **Основной запрос**: Запрос выбирает `id`, `name` из таблицы `customers`.
2. **Подзапросы**:
    - Первый подзапрос (`b`) суммирует `amount` из таблицы `sales`, группируя по `customer_id`, и возвращает `total_sales`.
    - Второй подзапрос (`c`) считает количество `order_id` из таблицы `orders`, группируя по `customer_id`, и возвращает `total_orders`.
3. **JOIN**: 
    - `INNER JOIN` соединяет основную таблицу `customers` с результатом первого подзапроса по `customer_id`.
    - `LEFT JOIN` соединяет основную таблицу `customers` с результатом второго подзапроса по `customer_id`.
4. **WHERE**: Фильтрация активных клиентов.
5. **ORDER BY**: Сортировка результата по `total_sales` в порядке убывания.

Следуя этим принципам и примерному подходу, можно строить сложные запросы с подзапросами и `JOIN` в PostgreSQL.