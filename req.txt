Да, возможно, что функция `$scope.runfunc()` выполнится раньше, чем значения будут присвоены переменным, если присвоение значений занимает длительное время. Чтобы убедиться, что значения присвоены перед выполнением функции `$scope.runfunc()`, можно использовать промисы или `$timeout` в AngularJS.

Вот пример с использованием `$timeout`, чтобы убедиться, что значения присвоены перед вызовом функции:

```javascript
$scope.функция = function(val1, val2) {
    $scope.vlar = val1;
    $scope.vlad = val2;

    // Используем $timeout с задержкой 0 мс, чтобы убедиться, что присвоение завершилось
    $timeout(function() {
        $scope.runfunc();
    }, 0);
};

// Определяем функцию runfunc
$scope.runfunc = function() {
    // Логика функции runfunc
    console.log("runfunc была вызвана!");
    // Пример: изменяем значение vlua
    $scope.vlua = $scope.vlua + 1;
};

// Присваиваем начальное значение vlua
$scope.vlua = 0;

// Вызываем функцию с нужными аргументами
$scope.функция(значение1, значение2);
```

В этом примере использование `$timeout` с задержкой в 0 мс гарантирует, что сначала будут выполнены все текущие операции (например, присвоение значений), а затем выполнится функция `$scope.runfunc()`.

Также можно использовать промисы для более сложных сценариев, если присвоение значений связано с асинхронными операциями:

```javascript
$scope.функция = function(val1, val2) {
    var promise = new Promise(function(resolve, reject) {
        $scope.vlar = val1;
        $scope.vlad = val2;
        resolve();
    });

    promise.then(function() {
        $scope.runfunc();
    });
};

// Определяем функцию runfunc
$scope.runfunc = function() {
    // Логика функции runfunc
    console.log("runfunc была вызвана!");
    // Пример: изменяем значение vlua
    $scope.vlua = $scope.vlua + 1;
};

// Присваиваем начальное значение vlua
$scope.vlua = 0;

// Вызываем функцию с нужными аргументами
$scope.функция(значение1, значение2);
```

Этот подход с использованием промисов может быть полезен, если вам нужно дождаться завершения асинхронных операций перед выполнением функции.