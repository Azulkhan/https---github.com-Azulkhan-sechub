

1. **Оператор `CONNECT BY` для иерархических запросов**:
   Этот оператор позволяет строить иерархические структуры, например, организации или каталоги файлов.

   ```sql
   SELECT LEVEL, employee_id, first_name, manager_id
   FROM employees
   START WITH manager_id IS NULL
   CONNECT BY PRIOR employee_id = manager_id;
   ```

   Этот запрос вернёт иерархию сотрудников, где `manager_id` указывает на их руководителя.

2. **Функция `ROWNUM` для ограничения результатов**:
   Используйте `ROWNUM` для ограничения числа строк в результатах.

   ```sql
   SELECT * FROM employees WHERE ROWNUM <= 10;
   ```

   Этот запрос вернёт первые 10 строк из таблицы сотрудников.

3. **Функция `LISTAGG` для агрегации строк в одно поле**:
   Она позволяет объединить строки в одну строку, разделённую определённым символом.

   ```sql
   SELECT department_id, LISTAGG(employee_name, ', ') WITHIN GROUP (ORDER BY employee_name) AS employees
   FROM employees
   GROUP BY department_id;
   ```

   Этот запрос вернёт список сотрудников для каждого департамента.

4. **Оператор `MERGE` для синхронизации данных**:
   Этот оператор используется для одновременной вставки, обновления и удаления данных.

   ```sql
   MERGE INTO target_table t
   USING source_table s
   ON (t.id = s.id)
   WHEN MATCHED THEN
     UPDATE SET t.name = s.name
   WHEN NOT MATCHED THEN
     INSERT (id, name) VALUES (s.id, s.name);
   ```

   Оператор обновит строки, если они уже существуют, или вставит новые, если их нет.

5. **Функция `NVL` для обработки `NULL` значений**:
   Эта функция заменяет `NULL` на значение по умолчанию.

   ```sql
   SELECT NVL(commission_pct, 0) AS commission
   FROM employees;
   ```

   Этот запрос заменит все значения `NULL` в колонке `commission_pct` на 0.

6. **Запрос с использованием `PARTITION BY` для оконных функций**:
   Например, расчёт сумм по группам:

   ```sql
   SELECT employee_id, department_id, salary, SUM(salary) OVER (PARTITION BY department_id) AS total_salary
   FROM employees;
   ```

   Этот запрос вычисляет общую зарплату по каждому департаменту, не группируя данные.

Эти запросы помогут решать различные задачи в Oracle, будь то работа с иерархиями, агрегация данных или синхронизация таблиц.