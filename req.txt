
Если вы работаете с HTTPS, вам потребуется библиотека LuaSec в дополнение к LuaSocket, поскольку LuaSocket по умолчанию не поддерживает SSL/TLS, необходимые для HTTPS. LuaSec расширяет LuaSocket, добавляя поддержку защищённых соединений.

Вот пример кода, который отправляет HTTPS POST-запрос с использованием LuaSec:

```lua
local https = require("ssl.https")
local ltn12 = require("ltn12")

local url = "https://ваш_сайт.com/путь"
local body = "param1=value1&param2=value2" -- данные для отправки
local response = {}

local res, code, response_headers, status = https.request{
    url = url,
    method = "POST",
    headers = {
        ["Content-Type"] = "application/x-www-form-urlencoded",
        ["Content-Length"] = tostring(#body)
    },
    source = ltn12.source.string(body),
    sink = ltn12.sink.table(response)
}

if code == 200 then
    print(table.concat(response)) -- вывод ответа сервера
else
    print("Ошибка: " .. (code or "неизвестный код"))
end
```

Этот код аналогичен предыдущему, но использует `ssl.https` вместо `socket.http` для работы с HTTPS. Параметры запроса, такие как URL, метод, заголовки и тело запроса, указываются в таблице, передаваемой функции `https.request`.

Перед использованием убедитесь, что у вас установлены как LuaSocket, так и LuaSec. Установка и настройка могут отличаться в зависимости от вашей операционной системы и среды разработки. Обычно они доступны через системы управления пакетами Lua, такие как LuaRocks.
