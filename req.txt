<dx:ASPxMenu ID="ASPxMenu1" runat="server" Orientation="Horizontal" 
    onitemclick="ASPxMenu1_ItemClick">
</dx:ASPxMenu>

protected void Page_Load(object sender, EventArgs e)
{
    if (!IsPostBack)
    {
        InitializeMenu();
    }
}

private void InitializeMenu()
{
    DataSet ds = GetMenuDataSet();
    DataTable dt = ds.Tables[0];
    
    foreach (DataRow row in dt.Rows)
    {
        // Предполагаем, что у вас есть столбцы ID, Name и ParentID в dt
        if (row.IsNull("ParentID") || Convert.ToInt32(row["ParentID"]) == 0)
        {
            DevExpress.Web.MenuItem rootItem = new DevExpress.Web.MenuItem();
            rootItem.Text = row["Name"].ToString();
            rootItem.Name = row["ID"].ToString(); // Используйте это для идентификации в обработчике кликов
            ASPxMenu1.Items.Add(rootItem);
            AddChildItems(rootItem, dt);
        }
    }
}

private void AddChildItems(DevExpress.Web.MenuItem parentItem, DataTable dt)
{
    foreach (DataRow row in dt.Rows)
    {
        if (!row.IsNull("ParentID") && Convert.ToInt32(row["ParentID"]) == Convert.ToInt32(parentItem.Name))
        {
            DevExpress.Web.MenuItem childItem = new DevExpress.Web.MenuItem();
            childItem.Text = row["Name"].ToString();
            childItem.Name = row["ID"].ToString();
            parentItem.Items.Add(childItem);
            // Рекурсивно добавляем дочерние элементы
            AddChildItems(childItem, dt);
        }
    }
}


protected void ASPxMenu1_ItemClick(object source, DevExpress.Web.MenuItemEventArgs e)
{
    // Здесь вы можете использовать e.Item.Name или e.Item.Text в зависимости от того, что вам нужно
    string selectedValue = e.Item.Name;
    // Используйте selectedValue для других действий
}
