<dx:ASPxComboBox ID="ASPxComboBox1" runat="server" IncrementalFilteringMode="Contains" 
    EnableIncrementalFiltering="True" DropDownStyle="DropDown">
</dx:ASPxComboBox>

<dx:ASPxMenu ID="ASPxMenu1" runat="server" ClientInstanceName="menu" 
    onitemclick="ASPxMenu1_ItemClick">
    <!-- Пункты меню будут добавлены динамически -->
</dx:ASPxMenu>

<script type="text/javascript">
    function OnMenuItemClick(s, e) {
        var comboBox = ASPxComboBox1;
        comboBox.SetText(e.item.text); // Установка текста в ASPxComboBox
        comboBox.SetValue(e.item.name); // Установка значения в ASPxComboBox
        comboBox.HideDropDown(); // Закрытие выпадающего списка
    }
</script>


protected void Page_Load(object sender, EventArgs e)
{
    if (!IsPostBack)
    {
        InitializeMenu();
    }
}

private void InitializeMenu()
{
    DataSet ds = GetMenuDataSet(); // Предположим, что здесь вы получаете данные
    DataTable dt = ds.Tables[0];

    foreach (DataRow row in dt.Rows)
    {
        if (row.IsNull("ParentID") || Convert.ToInt32(row["ParentID"]) == 0)
        {
            DevExpress.Web.MenuItem menuItem = new DevExpress.Web.MenuItem();
            menuItem.Text = row["Name"].ToString();
            menuItem.Name = row["ID"].ToString();
            ASPxMenu1.Items.Add(menuItem);
            AddChildItems(menuItem, dt);
        }
    }
}

private void AddChildItems(DevExpress.Web.MenuItem parentItem, DataTable dt)
{
    foreach (DataRow row in dt.Rows)
    {
        if (!row.IsNull("ParentID") && Convert.ToInt32(row["ParentID"]) == Convert.ToInt32(parentItem.Name))
        {
            DevExpress.Web.MenuItem childItem = new DevExpress.Web.MenuItem();
            childItem.Text = row["Name"].ToString();
            childItem.Name = row["ID"].ToString();
            parentItem.Items.Add(childItem);
            AddChildItems(childItem, dt); // Рекурсивное добавление подменю
        }
    }
}

// Этот обработчик необходим, если вы хотите выполнять серверные действия при выборе пункта меню
protected void ASPxMenu1_ItemClick(object source, DevExpress.Web.MenuItemEventArgs e)
{
    // Вы можете здесь использовать e.Item.Name или e.Item.Text в зависимости от того, что вам нужно
    // Например, установить значение в скрытом поле, для использования на сервере
}

--------------------------------------------------------?2


К сожалению, в версии DevExpress 11.1.6 ASPxComboBox не поддерживает многоуровневые элементы напрямую, но вы можете имитировать это поведение с помощью других компонентов. Вы можете создать своё собственное всплывающее окно с использованием ASPxPopupControl, внутри которого будет размещён ASPxMenu или ASPxTreeView, который будет эмулировать иерархическую структуру выбора. При выборе элемента вы можете обновить значение ASPxComboBox с помощью JavaScript.

Вот как вы можете инициализировать ASPxPopupControl с ASPxMenu внутри:

ASPX-разметка:
aspx
Copy code
<dx:ASPxComboBox ID="ASPxComboBox1" runat="server">
    <!-- Вы можете добавить элементы здесь или динамически в коде -->
</dx:ASPxComboBox>

<dx:ASPxPopupControl ID="PopupControl" runat="server" PopupElementID="ASPxComboBox1" ClientInstanceName="popup">
    <ContentCollection>
        <dx:PopupControlContentControl runat="server">
            <dx:ASPxMenu ID="ASPxMenu1" runat="server" ClientInstanceName="menu">
                <!-- Меню будет заполнено динамически -->
            </dx:ASPxMenu>
        </dx:PopupControlContentControl>
    </ContentCollection>
</dx:ASPxPopupControl>

<script type="text/javascript">
    // Функция для обработки выбора элемента меню
    function OnMenuItemClick(s, e) {
        // Закрыть всплывающее окно
        popup.Hide();
        
        // Обновить значение ASPxComboBox
        ASPxComboBox1.SetText(e.item.GetText());
        // Также можно установить значение, если это необходимо
        // ASPxComboBox1.SetValue(e.item.name);
    }
</script>
Code-behind C#:
csharp
Copy code
protected void Page_Load(object sender, EventArgs e)
{
    if (!IsPostBack)
    {
        InitializeMenu();
    }
}

private void InitializeMenu()
{
    // З
Если вы хотите, чтобы элементы ASPxMenu раскрывались и выбирались по клику, вам нужно будет использовать некоторый JavaScript для ручного управления поведением, поскольку стандартное поведение ASPxMenu предназначено для навигации, а не для выбора в стиле комбо-бокса.

Для версии 11.1.6 вам, возможно, придется прибегнуть к более сложным решениям, потому что стандартные средства могут быть ограничены. Вот пример того, как вы могли бы реализовать такое поведение:

javascript
Copy code
<script type="text/javascript">
// Данный скрипт предполагает, что у вас есть клиентский обработчик события для ASPxMenu
function OnMenuItemClick(s, e) {
    var item = e.item;
    // Проверяем, есть ли у пункта подменю
    if(item.items.length > 0) {
        // Если есть подменю, открываем или закрываем его
        ASPxClientMenu.Cast(s).SetItemVisible(item, !item.GetVisible());
    } else {
        // Если подменю нет, делаем что-то другое, например, закрываем меню
        // и используем значение пункта меню для других действий
    }
}
</script>
Вам нужно будет добавить этот скрипт в вашу веб-страницу и связать его с событием ItemClick вашего ASPxMenu.

Для серверной части вашего кода, вы должны заполнить ASPxMenu данными из базы данных и установить их вложенность соответствующим образом. Это выглядит следующим образом:

csharp
Copy code
protected void Page_Load(object sender, EventArgs e)
{
    if (!IsPostBack)
    {
        InitializeMenu();
    }
}

private void InitializeMenu()
{
    DataSet ds = GetMenuDataSet();
    DataTable dt = ds.Tables[0];

    // Первый уровень меню
    foreach (DataRow parentRow in dt.Select("ParentID IS NULL"))
    {
        DevExpress.Web.MenuItem parentItem = new DevExpress.Web.MenuItem();
        parentItem.Text = parentRow["Name"].ToString();
        ASPxMenu1.Items.Add(parentItem);

        // Вложенные уровни меню
        AddChildItems(parentItem, dt);
    }
}

private void AddChildItems(DevExpress.Web.MenuItem parentItem, DataTable dataTable)
{
    foreach (DataRow childRow in dataTable.Select($"ParentID = {parentItem.Name}"))
    {
        DevExpress.Web.MenuItem childItem = new DevExpress.Web.MenuItem();
        childItem.Text = childRow["Name"].ToString();
        parentItem.Items.Add(childItem);
        // Рекурсивно добавляем вложенные элементы, если они есть
        AddChildItems(childItem, dataTable);
    }
}

private DataSet GetMenuDataSet()
{
    // Ваш метод получения данных из базы данных
}
В этом коде предполагается, что ваши данные организованы таким образом, что у каждого элемента есть ParentID, который указывает на его родителя. Если ParentID равно null, то элемент является корневым пунктом меню.

Пожалуйста, убедитесь, что ваш ASPxMenu корректно связан с клиентским скриптом. Возможно, вам понадобится адаптировать приведенный выше JavaScript-код, чтобы он соответствовал вашим требованиям и работал с версией 11.1.6.


