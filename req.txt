Да, этот подход можно адаптировать для Angular. Вместо прямого использования JavaScript для манипуляций с DOM, вы можете использовать Angular-синтаксис и привязку данных для управления пагинацией. Вот пример, как это можно сделать в Angular.

Пример кода для Angular
HTML
html
Копировать код
<div class="pagination">
    <span class="material-icons-round" (click)="goToFirstPage()" title="Первая страница">first_page</span>
    <span class="material-icons" (click)="goToPreviousPage()" title="Предыдущая страница">navigate_before</span>

    <div class="page-numbers">
        <span *ngFor="let page of pages" 
              [class.active]="page === currentPage"
              (click)="selectPage(page)">
            {{ page }}
        </span>
    </div>

    <span class="material-icons" (click)="goToNextPage()" title="Следующая страница">navigate_next</span>
    <span class="material-icons-outlined" (click)="goToLastPage()" title="Последняя страница">last_page</span>
</div>
CSS
css
Копировать код
.pagination {
    display: flex;
    align-items: center;
}

.material-icons, .material-icons-round, .material-icons-outlined {
    cursor: pointer;
    margin: 0 5px;
}

.page-numbers {
    display: flex;
}

.page-numbers span {
    cursor: pointer;
    margin: 0 3px;
}

.page-numbers span.active {
    font-weight: bold;
}
TypeScript (Component)
typescript
Копировать код
import { Component, OnInit } from '@angular/core';

@Component({
  selector: 'app-pagination',
  templateUrl: './pagination.component.html',
  styleUrls: ['./pagination.component.css']
})
export class PaginationComponent implements OnInit {
  totalPages = 10; // Общее количество страниц
  currentPage = 1; // Номер текущей страницы
  pages: number[] = [];

  ngOnInit() {
    this.updatePagination();
  }

  updatePagination() {
    this.pages = [];
    let startPage = Math.max(1, this.currentPage - 2);
    let endPage = Math.min(this.totalPages, this.currentPage + 2);

    if (this.currentPage <= 3) {
      endPage = Math.min(this.totalPages, 5);
    }
    if (this.currentPage >= this.totalPages - 2) {
      startPage = Math.max(1, this.totalPages - 4);
    }

    for (let i = startPage; i <= endPage; i++) {
      this.pages.push(i);
    }
  }

  goToFirstPage() {
    this.currentPage = 1;
    this.updatePagination();
  }

  goToPreviousPage() {
    if (this.currentPage > 1) {
      this.currentPage--;
      this.updatePagination();
    }
  }

  goToNextPage() {
    if (this.currentPage < this.totalPages) {
      this.currentPage++;
      this.updatePagination();
    }
  }

  goToLastPage() {
    this.currentPage = this.totalPages;
    this.updatePagination();
  }

  selectPage(page: number) {
    this.currentPage = page;
    this.updatePagination();
  }
}
Описание
HTML: Используется Angular-синтаксис для привязки событий и динамического отображения страниц. *ngFor используется для итерации по массиву страниц и отображения их на экране.

CSS: Определяет стили для пагинации и активной страницы.

TypeScript (Component): Логика для управления пагинацией. Метод updatePagination обновляет массив страниц в зависимости от текущей страницы, а методы goToFirstPage, goToPreviousPage, goToNextPage, goToLastPage и selectPage изменяют текущую страницу и обновляют отображение.

Этот подход интегрирован с Angular и использует возможности фреймворка для управления состоянием и взаимодействия с DOM.
