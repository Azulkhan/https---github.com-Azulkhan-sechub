Вот как можно адаптировать вашу функцию `connect` для использования в AngularJS с использованием промисов:

```javascript
angular.module('myApp').factory('WebSocketService', function($q) {
  var webSocket;

  function connect() {
    if (webSocket && webSocket.readyState < 2) {
      console.log("reusing the socket connection [state = " + webSocket.readyState + "]: " + webSocket.url);
      return $q.resolve(webSocket);
    }

    return $q(function(resolve, reject) {
      webSocket = new WebSocket(SOCKET_URL);

      webSocket.onopen = function() {
        console.log("socket connection is opened [state = " + webSocket.readyState + "]: " + webSocket.url);
        resolve(webSocket);
      };

      webSocket.onerror = function(err) {
        console.error("socket connection error : ", err);
        reject(err);
      };

      webSocket.onclose = function(event) {
        if (event.wasClean) {
          console.error("socket connection is closed ");
        } else {
          console.log('Connection error');
        }
        console.log('Code: ' + event.code + ' Reason: ' + event.reason);
      };
    });
  }

  return {
    connect: connect
  };
});
```

Затем вы можете использовать этот сервис в контроллерах или других компонентах AngularJS:

```javascript
angular.module('myApp').controller('MyController', function(WebSocketService) {
  var vm = this;

  vm.connectWebSocket = function() {
    WebSocketService.connect().then(function(socket) {
      // Делайте что-то с возвращенным объектом WebSocket
    }).catch(function(error) {
      // Обрабатывайте ошибки
    });
  };
});
```

В этом примере я использовал сервис AngularJS для создания WebSocket соединения и возвращения промиса. Затем промис используется в контроллере для управления соединением и обработки результатов.