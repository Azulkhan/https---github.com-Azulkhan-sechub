Чтобы добавить пагинацию к вашей таблице в Angular, вы можете использовать встроенные возможности Angular и PrimeNG для упрощения работы. Ниже приведен пример реализации:

Установка PrimeNG и PrimeIcons:
bash
Копировать код
npm install primeng primeicons
Импорт модулей PrimeNG в app.module.ts:
typescript
Копировать код
import { NgModule } from '@angular/core';
import { BrowserModule } from '@angular/platform-browser';
import { AppComponent } from './app.component';
import { TableModule } from 'primeng/table';
import { PaginatorModule } from 'primeng/paginator';
import { FormsModule } from '@angular/forms';

@NgModule({
  declarations: [AppComponent],
  imports: [
    BrowserModule,
    TableModule,
    PaginatorModule,
    FormsModule
  ],
  providers: [],
  bootstrap: [AppComponent]
})
export class AppModule { }
Изменение вашего компонента для использования пагинации:
typescript
Копировать код
import { Component, OnInit } from '@angular/core';
import { DbQueryService } from './db-query.service'; // Убедитесь, что путь к вашему сервису правильный

@Component({
  selector: 'app-root',
  templateUrl: './app.component.html',
  styleUrls: ['./app.component.css']
})
export class AppComponent implements OnInit {
  query_report$mob_inv_os_unused: any[] = [];
  fields: any = {};
  query_options: any = {
    'report$mob_inv_os_unused': {
      flt: {},
      flteq: {},
      func22: {},
      orderAsc: 1,
      orderBy: '',
      first: 0,
      rows: 10
    }
  };

  constructor(private dbQueryService: DbQueryService) { }

  ngOnInit() {
    this.loadData();
  }

  loadData() {
    let option = this.query_options['report$mob_inv_os_unused'];
    option.preparam1 = this.f['param$74'].value ? this.f['param$74'].value : '';
    option.preparam2 = this.f['param$75'].value ? this.f['param$75'].value : '';
    option.preparam3 = this.f['param$81'].value ? this.f['param$81'].value : '';
    this.dbQueryService.getQuery(option).subscribe((resp) => {
      if (resp && resp.items) {
        this.query_report$mob_inv_os_unused = resp.items;
        if (!this.fields['report$mob_inv_os_unused']) {
          this.getFields('report$mob_inv_os_unused');
          console.log("tst: " + this.query_report$mob_inv_os_unused);
        }
      } else {
        this.query_report$mob_inv_os_unused = [];
      }
    });
  }

  paginate(event) {
    this.query_options['report$mob_inv_os_unused'].first = event.first;
    this.query_options['report$mob_inv_os_unused'].rows = event.rows;
    this.loadData();
  }

  // Другие методы вашего компонента...
}
Изменение вашего HTML шаблона для добавления пагинации:
html
Копировать код
<table class="table table-striped" style="padding: 12px; border: 1px solid #ddd;">
  <thead>
    <!-- Ваши заголовки колонок -->
  </thead>
  <tbody>
    <tr *ngIf="query_report$mob_inv_os_unused.length === 0">
      <td colspan="21" style="text-align: center;">
        <span>Данных нет</span>
      </td>
    </tr>
    <tr *ngFor="let row of query_report$mob_inv_os_unused">
      <!-- Ваши данные -->
    </tr>
  </tbody>
</table>

<p-paginator
  [rows]="query_options['report$mob_inv_os_unused'].rows"
  [totalRecords]="query_report$mob_inv_os_unused.length"
  (onPageChange)="paginate($event)"
  [rowsPerPageOptions]="[10, 20, 30, 50, 100]">
</p-paginator>
Этот код добавляет компонент PrimeNG p-paginator под вашей таблицей, который обрабатывает события изменения страницы и обновляет данные таблицы соответственно. Вы можете настроить массив rowsPerPageOptions в соответствии с вашими предпочтениями.
