Если вы используете библиотеку `xlsx` для создания Excel-файлов в JavaScript, то стилизация ячеек и заголовков несколько ограничена по сравнению с более продвинутыми инструментами. В `xlsx` вы можете устанавливать основные стили, такие как шрифт, цвет фона и рамки, но объединение ячеек и другие продвинутые возможности могут быть ограничены.

Вот пример кода с использованием `xlsx`, который позволяет установить основные стили для заголовков и данных:

```javascript
const XLSX = require('xlsx');

// Создаем новую книгу
let wb = XLSX.utils.book_new();

// Ваши заголовки
let xlsHeader = [
  "Заголовок 1", "Заголовок 2", "Заголовок 3", "Заголовок 4", "Заголовок 5", "Заголовок 6", "Заголовок 7", 
  "Заголовок 8", "Заголовок 9", "Заголовок 10", "Заголовок 11", 
  "Заголовок 12", "Заголовок 13", "Заголовок 14", 
  "Заголовок 15", "Заголовок 16", "Заголовок 17", 
  "Заголовок 18", "Заголовок 19", 
  "Заголовок 20", 
  "Заголовок 21", "Заголовок 22"
];

// Данные для Excel (пример данных)
let data = [
  [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22],
  [23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44]
];

// Создаем массив для хранения данных в формате xlsx
let createxlsxformat = [];

// Создаем объединенные заголовки
let mergedHeader = [
  { v: "Группа 1", s: { font: { bold: true }, fill: { fgColor: { rgb: "D9D9D9" } } } }, null, null, null, null, null, null, null, null, null, null,
  { v: "Группа 2", s: { font: { bold: true }, fill: { fgColor: { rgb: "D9D9D9" } } } }, null, null,
  { v: "Группа 3", s: { font: { bold: true }, fill: { fgColor: { rgb: "D9D9D9" } } } }, null, null,
  { v: "Группа 4", s: { font: { bold: true }, fill: { fgColor: { rgb: "D9D9D9" } } } }, null,
  { v: "Группа 5", s: { font: { bold: true }, fill: { fgColor: { rgb: "D9D9D9" } } } },
  null, null
];

// Добавляем заголовки и данные в createxlsxformat
createxlsxformat.push(mergedHeader); // Добавляем объединенные заголовки
createxlsxformat.push(xlsHeader); // Добавляем основные заголовки
data.forEach(row => createxlsxformat.push(row));

// Создаем рабочий лист из массива данных
let ws = XLSX.utils.aoa_to_sheet(createxlsxformat);

// Применяем стили к заголовкам
for (let c = 0; c < xlsHeader.length; c++) {
  const cellAddress = XLSX.utils.encode_cell({ r: 1, c: c });
  if (!ws[cellAddress]) ws[cellAddress] = {};
  ws[cellAddress].s = { font: { bold: true }, fill: { fgColor: { rgb: "D9D9D9" } } };
}

// Применяем стили к данным
for (let r = 2; r < createxlsxformat.length; r++) {
  for (let c = 0; c < createxlsxformat[r].length; c++) {
    const cellAddress = XLSX.utils.encode_cell({ r: r, c: c });
    if (!ws[cellAddress]) ws[cellAddress] = {};
    ws[cellAddress].s = { font: { name: "Times New Roman", sz: 10 }, border: { top: { style: "thin", color: { rgb: "000000" } }, bottom: { style: "thin", color: { rgb: "000000" } }, left: { style: "thin", color: { rgb: "000000" } }, right: { style: "thin", color: { rgb: "000000" } } } };
  }
}

// Создаем новую книгу и добавляем в нее лист
XLSX.utils.book_append_sheet(wb, ws, "Sheet1");

// Сохраняем книгу в файл
XLSX.writeFile(wb, 'example.xlsx');
```

Этот код создаст Excel-файл с заданными стилями для заголовков и данных. Обратите внимание, что стилизация в `xlsx` ограничена и не поддерживает такие возможности, как объединение ячеек и более сложные настройки стилей, которые могут быть доступны в более продвинутых библиотеках.