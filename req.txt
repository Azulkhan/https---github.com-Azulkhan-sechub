
Чтобы передать список идентификаторов, полученных из `ASPxGridView` с использованием метода `GetSelectedFieldValues("ID")`, в хранимую процедуру SQL Server, есть несколько подходов. Один из популярных способов — передача списка идентификаторов в виде строки, разделённой запятыми, и последующая обработка этой строки внутри хранимой процедуры. Начиная с SQL Server 2008, вы также можете использовать тип данных `table-valued parameter` для передачи списка значений.

### Пример с передачей строки, разделённой запятыми:

1. **Сформируйте строку из списка ID:**

```csharp
List<object> selectedKeys = grid.GetSelectedFieldValues("ID");
string idList = string.Join(",", selectedKeys.Select(k => k.ToString()).ToArray());
```

2. **Передайте эту строку в хранимую процедуру:**

Предположим, у вас есть хранимая процедура `YourStoredProcedure`, принимающая список ID как строку:

```sql
CREATE PROCEDURE YourStoredProcedure
    @IDList VARCHAR(MAX)
AS
BEGIN
    -- Разделение строки и обработка каждого ID
END
```

В вашем C# коде, используйте эту строку для вызова процедуры:

```csharp
using (SqlConnection conn = new SqlConnection("YourConnectionString"))
{
    SqlCommand cmd = new SqlCommand("YourStoredProcedure", conn);
    cmd.CommandType = CommandType.StoredProcedure;
    cmd.Parameters.AddWithValue("@IDList", idList);
    conn.Open();
    cmd.ExecuteNonQuery();
}
```

### Пример с использованием table-valued parameter:

1. **Создайте тип в SQL Server:**

```sql
CREATE TYPE IDListType AS TABLE ( ID INT );
```

2. **Создайте хранимую процедуру, использующую этот тип:**

```sql
CREATE PROCEDURE YourStoredProcedure
    @IDList IDListType READONLY
AS
BEGIN
    -- Обработка ID
END
```

3. **Передайте данные из C#:**

```csharp
using (SqlConnection conn = new SqlConnection("YourConnectionString"))
{
    SqlCommand cmd = new SqlCommand("YourStoredProcedure", conn);
    cmd.CommandType = CommandType.StoredProcedure;

    // Создание DataTable для хранения ID
    DataTable idsTable = new DataTable();
    idsTable.Columns.Add("ID", typeof(int));

    foreach (var id in selectedKeys)
    {
        idsTable.Rows.Add(id);
    }

    SqlParameter param = cmd.Parameters.AddWithValue("@IDList", idsTable);
    param.SqlDbType = SqlDbType.Structured;
    param.TypeName = "IDListType";

    conn.Open();
    cmd.ExecuteNonQuery();
}
```

Этот подход обеспечивает более гибкую и мощную обработку списков данных в SQL Server, поскольку вы можете работать с переданным списком как с таблицей, используя JOIN, WHERE и другие операции SQL.
